import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

malData=pd.read_csv("D:\share\MalwareData.csv", sep="|", low_memory =True)

malData["legitimate"].value_counts()
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()
y=malData['legitimate']
malData=malData.drop(['legitimate'],axis=1)

#data preprocessing
malData.drop_duplicates(inplace=True) # remove duplicate rows
malData.dropna(inplace=True) # remove rows with missing values

# Feature Extraction
malData['is_exe'] = malData['Name'].apply(lambda x: x.endswith('.exe')) # create a new feature indicating whether the file is an executable or not
malData['is_dll'] = malData['Name'].apply(lambda x: x.endswith('.dll')) # create a new feature indicating whether the file is a dynamic link library or not
malData.drop(['Name', 'md5'], axis=1, inplace=True) # drop irrelevant columns

# Feature Selection
corr_matrix = malData.corr().abs() # compute the correlation matrix
upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool)) # select the upper triangle of the correlation matrix
to_drop = [column for column in upper.columns if any(upper[column] > 0.95)] # find the features that are highly correlated
malData.drop(to_drop, axis=1, inplace=True) # drop the highly correlated features

#spliting the dataset into test and train
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(malData,y, test_size=0.2, random_state=42)