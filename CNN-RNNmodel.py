from tensorflow.keras.layers import Dense, Conv1D, MaxPooling1D, Dropout, LSTM, TimeDistributed

# Split the dataset into train and test
x_train, x_test, y_train, y_test = train_test_split(malData, y, test_size=0.2, random_state=42)

# Reshape the input data for CNN
x_train = np.reshape(x_train.values, (x_train.shape[0], x_train.shape[1], 1))
x_test = np.reshape(x_test.values, (x_test.shape[0], x_test.shape[1], 1))

# CNN-RNN model
model = Sequential()
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(x_train.shape[1], 1)))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.2))
model.add(Conv1D(filters=32, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.2))
model.add(LSTM(64))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.summary()

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=50, batch_size=128, verbose=1)

 # Predict on the training dataset
trainPred = model.predict(x_train)
trainPred = (trainPred > 0.5).astype(int)
accuracy_score(y_train, trainPred)

# Predict on the test dataset
y_prediction = model.predict(x_test)
y_prediction = (y_prediction > 0.5).astype(int)
accuracy_score(y_test, y_prediction)

confusion_matrix(y_test, y_prediction)

f1_score(y_test, y_prediction)
