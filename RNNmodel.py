from tensorflow.keras.layers import Dense, LSTM, Dropout

# Convert the input arrays to float32
malData = malData.astype('float32')
y = y.astype('float32')

# Split the dataset into train and test
x_train, x_test, y_train, y_test = train_test_split(malData, y, test_size=0.2, random_state=42)

# Reshape the input data for RNN
x_train = np.reshape(x_train.values, (x_train.shape[0], x_train.shape[1], 1))
x_test = np.reshape(x_test.values, (x_test.shape[0], x_test.shape[1], 1))

#RNN model
model = Sequential()
model.add(LSTM(64, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.summary()

#compile model
model.compile(loss="binary_crossentropy", optimizer="rmsprop", metrics=["accuracy"])

# Train the model
model.fit(x_train, y_train, epochs=50, batch_size=128)

# Predict on the training dataset
trainPred = model.predict(x_train)
trainPred = [1 if y >= 0.5 else 0 for y in trainPred]
accuracy_score(y_train, trainPred)

# Predict on the test dataset
y_prediction = model.predict(x_test)
y_prediction = [1 if y >= 0.5 else 0 for y in y_prediction]
accuracy_score(y_test, y_prediction)

confusion_matrix(y_test, y_prediction)

f1_score(y_test, y_prediction)